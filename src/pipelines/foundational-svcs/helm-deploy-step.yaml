parameters:
  serviceConnection: ''
  svcPrincipalClientId: ''
  svcPrincipalSecret: ''
  azureTenantId: ''
  aksName: ''
  aksResourceGroup: ''
  containerRegistryName: ''
  chartRepositoryName: ''
  chartName: ''
  helmReleaseName: ''
  k8sNamespace: ''
  env: ''
  # EVENTS SVC PARAMS
  eventsSvcImageRepositoryName: ''
  eventsSvcReplicas: ''
  eventsSvcResourceLimitsCpu: ''
  eventsSvcResourceLimitsMemory: ''
  eventsSvcResourceRequestsCpu: ''
  eventsSvcResourceRequestsMemory: ''
  eventsSvcNodeSelectorPool: ''
  eventsSvcImageTag: ''
  eventsSvcConfigMongoDbConnString: ''
  eventsSvcConfigMongoDbName: ''
  eventsSvcConfigMongoDbCollectionName: ''
  eventsSvcConfigMongoDbCollectionNameExceptions: ''
  eventsSvcConfigServiceBusConnectionString: ''
  eventsSvcConfigEventHubConnectionString: ''
  eventsSvcConfigStreamName: ''
  eventsSvcConfigIngressName: ''
  eventsSvcConfigEgressName: ''

steps:
- pwsh: |
    $env:HELM_EXPERIMENTAL_OCI = 1

    az login --service-principal -u $env:SP_CLIENT_ID -p $env:SP_SECRET --tenant $env:AZURE_TENANT_ID

    $fullRegistryName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io"

    $env:SP_SECRET | helm registry login $fullRegistryName `
      --username $env:SP_CLIENT_ID `
      --password-stdin

    $latestHelmChart = az acr repository show-tags `
      --name $env:CONTAINER_REGISTRY_NAME `
      --repository $env:CHART_REPOSITORY_NAME `
      --top 1 `
      --orderby time_desc | ConvertFrom-Json

    Write-Host ""
    $fullChartName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io" + "/" + $env:CHART_REPOSITORY_NAME + ":" + $latestHelmChart
    Write-Host "fullChartName: $fullChartName"

    helm chart pull $fullChartName

    Write-Host ""
    helm chart export $fullChartName --destination .

    # EVENTS SVC
    if ($env:EVENTS_SVC_IMAGE_TAG)
    {
      Write-Host Using configured events-svc tag: $env:EVENTS_SVC_IMAGE_TAG
      $latestEventsSvcTag = $env:EVENTS_SVC_IMAGE_TAG
    }
    else
    {
      Write-Host Fetching latest events-svc tag.
      $latestEventsSvcTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:EVENTS_SVC_IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
    }

    @"
    commonLabels:
      env: $env:ENV

    eventsService:
      image:
        repository: "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:EVENTS_SVC_IMAGE_REPOSITORY_NAME"
        tag: $latestEventsSvcTag

      deployment:
        replicas: $env:EVENTS_SVC_REPLICAS

      nodeSelector:
        pool: "$env:EVENTS_SVC_NODE_SELECTOR_POOL"

      pod:
        resources:
          limits:
            cpu: $env:EVENTS_SVC_RESOURCE_LIMITS_CPU
            memory: $env:EVENTS_SVC_RESOURCE_LIMITS_MEMORY
          requests:
            cpu: $env:EVENTS_SVC_RESOURCE_REQUESTS_CPU
            memory: $env:EVENTS_SVC_RESOURCE_REQUESTS_MEMORY

      config:
        cosmosMongo:
          connectionString: "$env:EVENTS_SVC_CONFIG_COSMOSDB_MONGO_CONN_STRING"
          databaseName: "$env:EVENTS_SVC_CONFIG_COSMOSDB_MONGO_DATABASE"
          collectionName: "$env:EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS"
          collectionNameExceptions: "$env:EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS_EXCEPTIONS"
        serviceBus:
          connectionString: "$env:EVENTS_SVC_CONFIG_SVC_BUS_CONN_STRING"
        eventHub:
          connectionString: "$env:EVENTS_SVC_CONFIG_EVENT_HUB_CONN_STRING"

    "@ | Out-File -FilePath ./deploy-values.yaml

    # this line for debugging, will print yaml to console
    # Get-Content -Path ./deploy-values.yaml

    Write-Host ""
    Write-Host "Helm deploy prep complete!"
  displayName: Prep Helm Deploy
  name: prepHelmDeploy
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: true
  env:
    SP_CLIENT_ID: ${{ parameters.svcPrincipalClientId }}
    SP_SECRET: ${{ parameters.svcPrincipalSecret }}
    AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
    CONTAINER_REGISTRY_NAME: ${{ parameters.containerRegistryName }}
    CHART_REPOSITORY_NAME: ${{ parameters.chartRepositoryName }}
    CHART_NAME: ${{ parameters.chartName }}
    ENV: ${{ parameters.env }}
    # EVENTS SVC PARAMS
    EVENTS_SVC_IMAGE_REPOSITORY_NAME: ${{ parameters.eventsSvcImageRepositoryName }}
    EVENTS_SVC_IMAGE_TAG: ${{ parameters.eventsSvcImageTag }}
    EVENTS_SVC_REPLICAS: ${{ parameters.eventsSvcReplicas }}
    EVENTS_SVC_NODE_SELECTOR_POOL: ${{ parameters.eventsSvcNodeSelectorPool }}
    EVENTS_SVC_RESOURCE_LIMITS_CPU: ${{ parameters.eventsSvcResourceLimitsCpu }}
    EVENTS_SVC_RESOURCE_LIMITS_MEMORY: ${{ parameters.eventsSvcResourceLimitsMemory }}
    EVENTS_SVC_RESOURCE_REQUESTS_CPU: ${{ parameters.eventsSvcResourceRequestsCpu }}
    EVENTS_SVC_RESOURCE_REQUESTS_MEMORY: ${{ parameters.eventsSvcResourceRequestsMemory }}
    EVENTS_SVC_CONFIG_COSMOSDB_MONGO_CONN_STRING: ${{ parameters.eventsSvcConfigMongoDbConnString }}
    EVENTS_SVC_CONFIG_COSMOSDB_MONGO_DATABASE: ${{ parameters.eventsSvcConfigMongoDbName }}
    EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS: ${{ parameters.eventsSvcConfigMongoDbCollectionName }}
    EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS_EXCEPTIONS: ${{ parameters.eventsSvcConfigMongoDbCollectionNameExceptions }}
    EVENTS_SVC_CONFIG_SVC_BUS_CONN_STRING: ${{ parameters.eventsSvcConfigServiceBusConnectionString }}
    EVENTS_SVC_CONFIG_EVENT_HUB_CONN_STRING: ${{ parameters.eventsSvcConfigEventHubConnectionString}}

- task: Kubernetes@1
  displayName: Kubectl Version
  name: kubectlVersion
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'version'
    arguments: '--short'

- task: HelmInstaller@1
  displayName: Helm Installer
  name: helmInstaller
  inputs:
    helmVersionToInstall: latest

- task: HelmDeploy@0
  displayName: Helm Deploy
  name: helmDeploy
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: ./${{ parameters.chartName }}
    releaseName: ${{ parameters.helmReleaseName }}
    valueFile: ./deploy-values.yaml
    install: true
    waitForExecution: false
    failOnStderr: false