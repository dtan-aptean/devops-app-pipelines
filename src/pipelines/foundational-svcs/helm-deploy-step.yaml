parameters:
  serviceConnection: ''
  svcPrincipalClientId: ''
  svcPrincipalSecret: ''
  azureTenantId: ''
  aksName: ''
  aksResourceGroup: ''
  containerRegistryName: ''
  chartRepositoryName: ''
  chartName: ''
  helmReleaseName: ''
  k8sNamespace: ''
  # COMMON CONFIG
  env: ''
  location: ''
  mongoDbName: ''
  mongoDbConnString: ''
  svcBusConnString: ''
  sentryDsn: ''
  newRelicApiKey: ''
  # EVENTS SVC PARAMS
  eventsSvcImageRepositoryName: ''
  eventsSvcReplicas: ''
  eventsSvcResourceLimitsCpu: ''
  eventsSvcResourceLimitsMemory: ''
  eventsSvcResourceRequestsCpu: ''
  eventsSvcResourceRequestsMemory: ''
  eventsSvcNodeSelectorPool: ''
  eventsSvcImageTag: ''
  eventsSvcConfigMongoDbCollectionName: ''
  eventsSvcConfigMongoDbCollectionNameExceptions: ''
  # STATIC WEB FILES SVC PARAMS
  staticWebFilesSvcImageRepositoryName: ''
  staticWebFilesSvcReplicas: ''
  staticWebFilesSvcResourceLimitsCpu: ''
  staticWebFilesSvcResourceLimitsMemory: ''
  staticWebFilesSvcResourceRequestsCpu: ''
  staticWebFilesSvcResourceRequestsMemory: ''
  staticWebFilesSvcNodeSelectorPool: ''
  staticWebFilesSvcConfigAzureStorageAccountName: ''
  staticWebFilesSvcConfigAzureStorageAccountKey: ''
  staticWebFilesSvcKongIngressUpstreamHostHeader: ''
  staticWebFilesSvcKongIngressClass: ''
  # SHORT URL SVC PARAMS
  shortUrlSvcImageRepositoryName: ''
  shortUrlSvcResourceLimitsCpu: ''
  shortUrlSvcResourceLimitsMemory: ''
  shortUrlSvcResourceRequestsCpu: ''
  shortUrlSvcResourceRequestsMemory: ''
  shortUrlSvcReplicas: ''
  shortUrlSvcNodeSelectorPool: ''
  shortUrlSvcMongoDbCollectionName: ''
  shortUrlSvcKongIngressUpstreamHostHeader: ''
  shortUrlSvcKongIngressClass: ''
  shortUrlSvcEventsIngressQueue: ''
  shortUrlSvcDomain: ''

steps:
- pwsh: |
    $env:HELM_EXPERIMENTAL_OCI = 1

    az login --service-principal -u $env:SP_CLIENT_ID -p $env:SP_SECRET --tenant $env:AZURE_TENANT_ID

    $fullRegistryName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io"

    $env:SP_SECRET | helm registry login $fullRegistryName `
      --username $env:SP_CLIENT_ID `
      --password-stdin

    $latestHelmChart = az acr repository show-tags `
      --name $env:CONTAINER_REGISTRY_NAME `
      --repository $env:CHART_REPOSITORY_NAME `
      --top 1 `
      --orderby time_desc | ConvertFrom-Json

    Write-Host ""
    $fullChartName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io" + "/" + $env:CHART_REPOSITORY_NAME + ":" + $latestHelmChart
    Write-Host "fullChartName: $fullChartName"

    helm chart pull $fullChartName

    Write-Host ""
    helm chart export $fullChartName --destination .

    if ($env:DOCKER_IMAGE_TAGS) {
      $tags = $env:DOCKER_IMAGE_TAGS.Split(',')
      $latestEventsSvcTag = $tags[0].Split(':')[1]
      $latestStaticWebFilesSvcTag = $tags[1].Split(':')[1]
      $latestShortUrlSvcTag = $tags[2].Split(':')[1]
      Write-Host events-svc tag: $latestEventsSvcTag
      Write-Host static-web-files-svc tag: $latestStaticWebFilesSvcTag
      Write-Host short-url-svc tag: $latestShortUrlSvcTag
    }

    # EVENTS SVC
    if (!$latestEventsSvcTag) {
      if ($env:EVENTS_SVC_IMAGE_TAG)
      {
        Write-Host Using configured events-svc tag: $env:EVENTS_SVC_IMAGE_TAG
        $latestEventsSvcTag = $env:EVENTS_SVC_IMAGE_TAG
      }
      else
      {
        Write-Host Fetching latest events-svc tag.
        $latestEventsSvcTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:EVENTS_SVC_IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
      }
    }

    # STATIC WEB FILES SVC
    if (!$latestStaticWebFilesSvcTag) {
      if ($env:STATIC_WEB_FILES_SVC_IMAGE_TAG)
      {
        Write-Host Using configured static-web-files-svc tag: $env:STATIC_WEB_FILES_SVC_IMAGE_TAG
        $latestStaticWebFilesSvcTag = $env:STATIC_WEB_FILES_SVC_IMAGE_TAG
      }
      else
      {
        Write-Host Fetching latest static-web-files-svc tag.
        $latestStaticWebFilesSvcTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:STATIC_WEB_FILES_SVC_IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
      }
    }

    # SHORT URL SVC
    if (!$latestShortUrlSvcTag) {
      if ($env:SHORT_URL_SVC_IMAGE_TAG)
      {
        Write-Host Using configured short-url-svc tag: $env:SHORT_URL_SVC_IMAGE_TAG
        $latestShortUrlSvcTag = $env:SHORT_URL_SVC_IMAGE_TAG
      }
      else
      {
        Write-Host Fetching latest short-url-svc tag.
        $latestShortUrlSvcTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:SHORT_URL_SVC_IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
      }
    }

    $allTags = "events-svc:{0},static-web-files-svc:{1},short-url-svc:{2}" `
               -f $latestEventsSvcTag, `
                  $latestStaticWebFilesSvcTag, `
                  $latestShortUrlSvcTag
    Write-Host "##vso[task.setvariable variable=docker_image_tags;]$allTags"
    @"
    commonLabels:
      env: $env:ENV
      location: $env:LOCATION

    config:
      cosmosMongo: 
        connectionString: "$env:COSMOSDB_MONGO_CONN_STRING"
        databaseName: "$env:COSMOSDB_MONGO_DATABASE"
      serviceBus:
        connectionString: "$env:EVENTS_SVC_BUS_CONN_STRING"
      sentry:
        dsn: "$env:SENTRY_DSN"
      newRelic:
        apiKey: "$env:NEW_RELIC_API_KEY"

    eventsService:
      image:
        repository: "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:EVENTS_SVC_IMAGE_REPOSITORY_NAME"
        tag: $latestEventsSvcTag

      deployment:
        replicas: $env:EVENTS_SVC_REPLICAS

      nodeSelector:
        pool: "$env:EVENTS_SVC_NODE_SELECTOR_POOL"

      pod:
        resources:
          limits:
            cpu: $env:EVENTS_SVC_RESOURCE_LIMITS_CPU
            memory: $env:EVENTS_SVC_RESOURCE_LIMITS_MEMORY
          requests:
            cpu: $env:EVENTS_SVC_RESOURCE_REQUESTS_CPU
            memory: $env:EVENTS_SVC_RESOURCE_REQUESTS_MEMORY

      config:
        cosmosMongo:
          collectionName: "$env:EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS"
          collectionNameExceptions: "$env:EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS_EXCEPTIONS"
        eventHub:
          connectionString: "$env:EVENTS_SVC_CONFIG_EVENT_HUB_CONN_STRING"

    staticWebFilesService:
      image:
        repository: "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:STATIC_WEB_FILES_SVC_IMAGE_REPOSITORY_NAME"
        tag: $latestStaticWebFilesSvcTag

      deployment:
        replicas: $env:STATIC_WEB_FILES_SVC_REPLICAS

      nodeSelector:
        pool: "$env:STATIC_WEB_FILES_SVC_NODE_SELECTOR_POOL"

      pod:
        resources:
          limits:
            cpu: $env:STATIC_WEB_FILES_SVC_RESOURCE_LIMITS_CPU
            memory: $env:STATIC_WEB_FILES_SVC_RESOURCE_LIMITS_MEMORY
          requests:
            cpu: $env:STATIC_WEB_FILES_SVC_RESOURCE_REQUESTS_CPU
            memory: $env:STATIC_WEB_FILES_SVC_RESOURCE_REQUESTS_MEMORY

      kongIngress:
        route:
          headers:
            x-azure-fdid:
            - $env:FRONT_DOOR_ID
        upstream:
          host_header: $env:STATIC_WEB_FILES_SVC_KONG_INGRESS_UPSTREAM_HOST_HEADER

      ingress:
        annotations:
          kubernetes.io/ingress.class: $env:STATIC_WEB_FILES_SVC_KONG_INGRESS_CLASS

      config:
        azureStorage:
          accountName: "$env:STATIC_WEB_FILES_SVC_AZ_STORAGE_ACCT_NAME"
          accountKey: "$env:STATIC_WEB_FILES_SVC_AZ_STORAGE_ACCT_KEY"
    
    shortUrlService:
      image:
        repository: "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:SHORT_URL_SVC_IMAGE_REPOSITORY_NAME"
        tag: $latestShortUrlSvcTag

      deployment:
        replicas: $env:SHORT_URL_SVC_REPLICAS

      nodeSelector:
        pool: "$env:SHORT_URL_SVC_NODE_SELECTOR_POOL"

      pod:
        resources:
          limits:
            cpu: $env:SHORT_URL_SVC_RESOURCE_LIMITS_CPU
            memory: $env:SHORT_URL_SVC_RESOURCE_LIMITS_MEMORY
          requests:
            cpu: $env:SHORT_URL_SVC_RESOURCE_REQUESTS_CPU
            memory: $env:SHORT_URL_SVC_RESOURCE_REQUESTS_MEMORY

      kongIngress:
        route:
          headers:
            x-azure-fdid:
            - $env:FRONT_DOOR_ID
        upstream:
          host_header: $env:SHORT_URL_SVC_KONG_INGRESS_UPSTREAM_HOST_HEADER

      ingress:
        annotations:
          kubernetes.io/ingress.class: $env:SHORT_URL_SVC_KONG_INGRESS_CLASS

      config:
        cosmosMongo:
          collectionName: "$env:SHORT_URL_SVC_COSMOSDB_MONGO_COLLECTION"
        events:
          ingressQueue: "$env:SHORT_URL_SVC_EVENTS_INGRESS_QUEUE"
        domain: "$env:SHORT_URL_SVC_DOMAIN"

    "@ | Out-File -FilePath ./deploy-values.yaml

    # this line for debugging, will print yaml to console
    # Get-Content -Path ./deploy-values.yaml

    Write-Host ""
    Write-Host "Helm deploy prep complete!"
  displayName: Prep Helm Deploy
  name: prepHelmDeploy
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: true
  env:
    SP_CLIENT_ID: ${{ parameters.svcPrincipalClientId }}
    SP_SECRET: ${{ parameters.svcPrincipalSecret }}
    AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
    CONTAINER_REGISTRY_NAME: ${{ parameters.containerRegistryName }}
    CHART_REPOSITORY_NAME: ${{ parameters.chartRepositoryName }}
    CHART_NAME: ${{ parameters.chartName }}
    # COMMON CONFIG
    ENV: ${{ parameters.env }}
    LOCATION: ${{ parameters.location }}
    COSMOSDB_MONGO_DATABASE: ${{ parameters.mongoDbName }}
    COSMOSDB_MONGO_CONN_STRING: ${{ parameters.mongoDbConnString }}
    EVENTS_SVC_BUS_CONN_STRING: ${{ parameters.svcBusConnString }}
    SENTRY_DSN: ${{ parameters.sentryDsn }}
    NEW_RELIC_API_KEY: ${{ parameters.newRelicApiKey }}
    # EVENTS SVC PARAMS
    EVENTS_SVC_IMAGE_REPOSITORY_NAME: ${{ parameters.eventsSvcImageRepositoryName }}
    EVENTS_SVC_IMAGE_TAG: ${{ parameters.eventsSvcImageTag }}
    EVENTS_SVC_REPLICAS: ${{ parameters.eventsSvcReplicas }}
    EVENTS_SVC_NODE_SELECTOR_POOL: ${{ parameters.eventsSvcNodeSelectorPool }}
    EVENTS_SVC_RESOURCE_LIMITS_CPU: ${{ parameters.eventsSvcResourceLimitsCpu }}
    EVENTS_SVC_RESOURCE_LIMITS_MEMORY: ${{ parameters.eventsSvcResourceLimitsMemory }}
    EVENTS_SVC_RESOURCE_REQUESTS_CPU: ${{ parameters.eventsSvcResourceRequestsCpu }}
    EVENTS_SVC_RESOURCE_REQUESTS_MEMORY: ${{ parameters.eventsSvcResourceRequestsMemory }}
    EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS: ${{ parameters.eventsSvcConfigMongoDbCollectionName }}
    EVENTS_SVC_CONFIG_COSMOSDB_MONGO_COLLECTION_EVENTS_EXCEPTIONS: ${{ parameters.eventsSvcConfigMongoDbCollectionNameExceptions }}
    # STATIC WEB FILES SVC PARAMS
    STATIC_WEB_FILES_SVC_IMAGE_REPOSITORY_NAME: ${{ parameters.staticWebFilesSvcImageRepositoryName }}
    STATIC_WEB_FILES_SVC_REPLICAS: ${{ parameters.staticWebFilesSvcReplicas }}
    STATIC_WEB_FILES_SVC_RESOURCE_LIMITS_CPU: ${{ parameters.staticWebFilesSvcResourceLimitsCpu }}
    STATIC_WEB_FILES_SVC_RESOURCE_LIMITS_MEMORY: ${{ parameters.staticWebFilesSvcResourceLimitsMemory }}
    STATIC_WEB_FILES_SVC_RESOURCE_REQUESTS_CPU: ${{ parameters.staticWebFilesSvcResourceRequestsCpu }}
    STATIC_WEB_FILES_SVC_RESOURCE_REQUESTS_MEMORY: ${{ parameters.staticWebFilesSvcResourceRequestsMemory }}
    STATIC_WEB_FILES_SVC_NODE_SELECTOR_POOL: ${{ parameters.staticWebFilesSvcNodeSelectorPool }}
    STATIC_WEB_FILES_SVC_AZ_STORAGE_ACCT_NAME: ${{ parameters.staticWebFilesSvcConfigAzureStorageAccountName}}
    STATIC_WEB_FILES_SVC_AZ_STORAGE_ACCT_KEY: ${{ parameters.staticWebFilesSvcConfigAzureStorageAccountKey}}
    STATIC_WEB_FILES_SVC_KONG_INGRESS_UPSTREAM_HOST_HEADER: ${{ parameters.staticWebFilesSvcKongIngressUpstreamHostHeader }}
    STATIC_WEB_FILES_SVC_KONG_INGRESS_CLASS: ${{ parameters.staticWebFilesSvcKongIngressClass }}
    # SHORT URL SVC PARAMS
    SHORT_URL_SVC_IMAGE_REPOSITORY_NAME: ${{ parameters.shortUrlSvcImageRepositoryName }}
    SHORT_URL_SVC_RESOURCE_LIMITS_CPU: ${{ parameters.shortUrlSvcResourceLimitsCpu }}
    SHORT_URL_SVC_RESOURCE_LIMITS_MEMORY: ${{ parameters.shortUrlSvcResourceLimitsMemory }}
    SHORT_URL_SVC_RESOURCE_REQUESTS_CPU: ${{ parameters.shortUrlSvcResourceRequestsCpu }}
    SHORT_URL_SVC_RESOURCE_REQUESTS_MEMORY: ${{ parameters.shortUrlSvcResourceRequestsMemory }}
    SHORT_URL_SVC_REPLICAS: ${{ parameters.shortUrlSvcReplicas }}
    SHORT_URL_SVC_NODE_SELECTOR_POOL: ${{ parameters.shortUrlSvcNodeSelectorPool }}
    SHORT_URL_SVC_COSMOSDB_MONGO_COLLECTION: ${{ parameters.shortUrlSvcMongoDbCollectionName }}
    SHORT_URL_SVC_KONG_INGRESS_UPSTREAM_HOST_HEADER: ${{ parameters.shortUrlSvcKongIngressUpstreamHostHeader }}
    SHORT_URL_SVC_KONG_INGRESS_CLASS: ${{ parameters.shortUrlSvcKongIngressClass }}
    SHORT_URL_SVC_EVENTS_INGRESS_QUEUE: ${{ parameters.shortUrlSvcEventsIngressQueue }}
    SHORT_URL_SVC_DOMAIN: ${{ parameters.shortUrlSvcDomain }}

- task: Kubernetes@1
  displayName: Kubectl Version
  name: kubectlVersion
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'version'
    arguments: '--short'

- task: HelmInstaller@1
  displayName: Helm Installer
  name: helmInstaller
  inputs:
    helmVersionToInstall: latest

- task: HelmDeploy@0
  displayName: Helm Deploy
  name: helmDeploy
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: ./${{ parameters.chartName }}
    releaseName: ${{ parameters.helmReleaseName }}
    valueFile: ./deploy-values.yaml
    install: true
    waitForExecution: false
    failOnStderr: false