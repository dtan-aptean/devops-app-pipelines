parameters:
  serviceConnection: ''
  svcPrincipalClientId: ''
  svcPrincipalSecret: ''
  azureTenantId: ''
  aksName: ''
  aksResourceGroup: ''
  containerRegistryName: ''
  imageRepositoryName: ''
  chartRepositoryName: ''
  k8sNamespace: ''
  helmReleaseName: ''
  chartName: ''
  env: ''
  replicas: ''
  frontDoorId: ''
  kongIngressClass: ''
  kongIngressUpstreamHostHeader: ''
  resourceLimitsCpu: ''
  resourceLimitsMemory: ''
  resourceRequestsCpu: ''
  resourceRequestsMemory: ''
  appInsightsKey: ''
  cosmosConnString: ''
  cosmosDatabase: ''
  cosmosContainer: ''
  serviceBusConnectionString: ''
  sbSmsReqQueue: ''
  sbEmailReqQueue: ''
  sbEventsTopic: ''
  sbPlatformEventsSubscription: ''
  b2cClientId: ''
  b2cDomainHost: ''
  b2cTenantId: ''
  b2cPolicyName: ''
  subsMgmtGrpcUrl: ''
  subsMgmtServiceId: ''
  subsMgmtApiKey: ''
  smsFromPhoneNumber: ''
  processPlatformEvents: ''

steps:
- pwsh: |
    $env:HELM_EXPERIMENTAL_OCI = 1

    az login --service-principal -u $env:SP_CLIENT_ID -p $env:SP_SECRET --tenant $env:AZURE_TENANT_ID

    $fullRegistryName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io"

    $env:SP_SECRET | helm registry login $fullRegistryName `
      --username $env:SP_CLIENT_ID `
      --password-stdin

    $latestHelmChart = az acr repository show-tags `
      --name $env:CONTAINER_REGISTRY_NAME `
      --repository $env:CHART_REPOSITORY_NAME `
      --top 1 `
      --orderby time_desc | ConvertFrom-Json

    $latestTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
    $imageRepository = "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:CHART_NAME"

    Write-Host ""
    $fullChartName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io" + "/" + $env:CHART_REPOSITORY_NAME + ":" + $latestHelmChart
    Write-Host "fullChartName: $fullChartName"

    helm chart pull $fullChartName

    Write-Host ""
    helm chart export $fullChartName --destination .

    @"
    image:
      repository: $imageRepository
      tag: $latestTag

    commonLabels:
      env: $env:ENV

    deployment:
      replicas: $env:REPLICAS

    pod:
      resources:
        limits:
          cpu: $env:RESOURCE_LIMITS_CPU
          memory: $env:RESOURCE_LIMITS_MEMORY
        requests:
          cpu: $env:RESOURCE_REQUESTS_CPU
          memory: $env:RESOURCE_REQUESTS_MEMORY

    kongIngress:
      route:
        headers:
          x-azure-fdid:
          - $env:FRONT_DOOR_ID
      upstream:
        host_header: $env:KONG_INGRESS_UPSTREAM_HOST_HEADER

    ingress:
      annotations:
        kubernetes.io/ingress.class: $env:KONG_INGRESS_CLASS

    config:
      cosmos:
        connectionString: "$env:COSMOS_CONN_STRING"
        databaseName: "$env:COSMOS_DATABASE"
        containerName: "$env:COSMOS_CONTAINER"
      serviceBus:
        connectionString: "$env:SB_CONN_STRING"
        smsRequestQueue: "$env:SB_SMS_REQ_QUEUE"
        emailRequestQueue: "$env:SB_EMAIL_REQ_QUEUE"
        eventsTopic: "$env:SB_EVENTS_TOPIC"
        platformEventsSubscription: "$env:SB_PLATFORM_EVENTS_SUBSCRIPTION"
      appInsights:
        instrumentationKey: "$env:APP_INSIGHTS_INSTRUMENTATION_KEY"
      b2c:
        clientId: "$env:B2C_CLIENT_ID"
        domainHost: "$env:B2C_DOMAIN_HOST"
        tenantId: "$env:B2C_TENANT_ID"
        policyName: "$env:B2C_POLICY_NAME"
      subsMgmt:
        grpcUrl: "$env:SUBS_MGMT_GRPC_URL"
        apiKey: "$env:SUBS_MGMT_API_KEY"
        serviceId: "$env:SUBS_MGMT_SERVICE_ID"
      smsFromPhoneNumber: "$env:SMS_FROM_PHONE_NUMBER"
      processPlatformEvents: $env:PROCESS_PLATFORM_EVENTS
    "@ | Out-File -FilePath ./deploy-values.yaml

    Write-Host ""
    Write-Host "Helm deploy prep complete!"
  displayName: Prep Helm Deploy
  name: prepHelmDeploy
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: true
  env:
    SP_CLIENT_ID: ${{ parameters.svcPrincipalClientId }}
    SP_SECRET: ${{ parameters.svcPrincipalSecret }}
    AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
    CONTAINER_REGISTRY_NAME: ${{ parameters.containerRegistryName }}
    IMAGE_REPOSITORY_NAME: ${{ parameters.imageRepositoryName }}
    CHART_REPOSITORY_NAME: ${{ parameters.chartRepositoryName }}
    CHART_NAME: ${{ parameters.chartName }}
    ENV: ${{ parameters.env }}
    REPLICAS: ${{ parameters.replicas }}
    FRONT_DOOR_ID: ${{ parameters.frontDoorId }}
    KONG_INGRESS_CLASS: ${{ parameters.kongIngressClass }}
    KONG_INGRESS_UPSTREAM_HOST_HEADER: ${{ parameters.kongIngressUpstreamHostHeader }}
    RESOURCE_LIMITS_CPU: ${{ parameters.resourceLimitsCpu }}
    RESOURCE_LIMITS_MEMORY: ${{ parameters.resourceLimitsMemory }}
    RESOURCE_REQUESTS_CPU: ${{ parameters.resourceRequestsCpu }}
    RESOURCE_REQUESTS_MEMORY: ${{ parameters.resourceRequestsMemory }}
    APP_INSIGHTS_INSTRUMENTATION_KEY: ${{ parameters.appInsightsKey }}
    COSMOS_CONN_STRING: ${{ parameters.cosmosConnString }}
    COSMOS_DATABASE: ${{ parameters.cosmosDatabase }}
    COSMOS_CONTAINER: ${{ parameters.cosmosContainer }}
    SB_CONN_STRING: ${{ parameters.serviceBusConnectionString }}
    SB_SMS_REQ_QUEUE: ${{ parameters.sbSmsReqQueue }}
    SB_EMAIL_REQ_QUEUE: ${{ parameters.sbEmailReqQueue }}
    SB_EVENTS_TOPIC: ${{ parameters.sbEventsTopic }}
    SB_PLATFORM_EVENTS_SUBSCRIPTION: ${{ parameters.sbPlatformEventsSubscription }}
    B2C_CLIENT_ID: ${{ parameters.b2cClientId }}
    B2C_DOMAIN_HOST: ${{ parameters.b2cDomainHost }}
    B2C_TENANT_ID: ${{ parameters.b2cTenantId }}
    B2C_POLICY_NAME: ${{ parameters.b2cPolicyName }}
    SUBS_MGMT_GRPC_URL: ${{ parameters.subsMgmtGrpcUrl }}
    SUBS_MGMT_SERVICE_ID: ${{ parameters.subsMgmtServiceId }}
    SUBS_MGMT_API_KEY: ${{ parameters.subsMgmtApiKey }}
    SMS_FROM_PHONE_NUMBER: ${{ parameters.smsFromPhoneNumber }}
    PROCESS_PLATFORM_EVENTS: ${{ parameters.processPlatformEvents }}

- task: HelmInstaller@1
  displayName: Helm installer
  inputs:
    helmVersionToInstall: latest

- task: Bash@3
  displayName: Download kubelogin
  name: downloadKubelogin
  inputs:
    targetType: 'inline'
    script: wget https://github.com/Azure/kubelogin/releases/download/v0.0.4/kubelogin.zip
    workingDirectory: $(System.DefaultWorkingDirectory)
    failOnStderr: false
  env:
    NOOP_PATH: $(Build.ArtifactStagingDirectory)/noop.txt

- pwsh: |
    Test-Path ./kubelogin.zip
    Write-Host ""
    Expand-Archive -Path kubelogin.zip -DestinationPath ./kubelogin
    Write-Host ( Get-ChildItem ./kubelogin | Measure-Object ).Count;
  displayName: Debug Files
  name: debugFiles
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: false