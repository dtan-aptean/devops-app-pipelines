parameters:
  releaseVersion: ''
  serviceConnection: ''
  svcPrincipalClientId: ''
  svcPrincipalSecret: ''
  azureTenantId: ''
  aksName: ''
  aksResourceGroup: ''
  containerRegistryName: ''
  imageRepositoryName: ''
  chartRepositoryName: ''
  k8sNamespace: ''
  helmReleaseName: ''
  chartName: ''
  env: ''
  location: ''
  newRelicCliApiKey: ''
  newRelicAccountId: ''
  replicas: ''
  frontDoorId: ''
  kongIngressClass: ''
  kongIngressUpstreamHostHeader: ''
  resourceLimitsCpu: ''
  resourceLimitsMemory: ''
  resourceRequestsCpu: ''
  resourceRequestsMemory: ''
  cosmosConnString: ''
  cosmosDatabase: ''
  cosmosContainer: ''  
  serviceBusConnectionString: ''
  sbEventsTopic: ''
  sbPlatformEventsSubscription: ''  
  appInsightsKey: ''
  enableIntrospection: ''
  enableTracing: ''
  apiKind: ''
  nodeSelectorPool: ''
  imageTag: ''
  eventsSbConnString: ''
  eventsSbQueue: ''

steps:
- pwsh: |
    $env:HELM_EXPERIMENTAL_OCI = 1

    az login --service-principal -u $env:SP_CLIENT_ID -p $env:SP_SECRET --tenant $env:AZURE_TENANT_ID

    $fullRegistryName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io"

    $env:SP_SECRET | helm registry login $fullRegistryName `
      --username $env:SP_CLIENT_ID `
      --password-stdin

    $helmCharts = az acr repository show-tags `
      --name $env:CONTAINER_REGISTRY_NAME `
      --repository $env:CHART_REPOSITORY_NAME `
      --top 10 `
      --orderby time_desc | ConvertFrom-Json
      
    $latestHelmChart = $helmCharts[0]

    foreach($chart in $helmCharts)
    {
      if($chart -eq $releaseVersion)
      {
        $latestHelmChart = $chart
        break
      }
    }

    if ($env:DOCKER_IMAGE_TAGS) {
      $latestTag = $env:DOCKER_IMAGE_TAGS.Split(':')[1]
      Write-Host subs-mgmt-api-svc tag: $latestTag
    }

    if (!$latestTag) {
      if ($env:IMAGE_TAG) 
      {
        Write-Host Using configured tag: $env:IMAGE_TAG      
        $latestTag = $env:IMAGE_TAG
      }
      else
      {      
        Write-Host Fetching latest tag. 
        $latestTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
      }
    }
    $imageRepository = "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:CHART_NAME"

    Write-Host ""
    $fullChartName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io" + "/" + $env:CHART_REPOSITORY_NAME + ":" + $latestHelmChart
    Write-Host "fullChartName: $fullChartName"

    helm chart pull $fullChartName

    Write-Host ""
    helm chart export $fullChartName --destination .

    Write-Host "##vso[task.setvariable variable=docker_image_tags;]subs-mgmt-api-svc:$latestTag"  
    @"
    image:
      repository: $imageRepository
      tag: $latestTag

    commonLabels:
      env: $env:ENV
      location: $env:LOCATION

    deployment:
      replicas: $env:REPLICAS

    nodeSelector:
      pool: "$env:NODE_SELECTOR_POOL"      

    pod:
      resources:
        limits:
          cpu: $env:RESOURCE_LIMITS_CPU
          memory: $env:RESOURCE_LIMITS_MEMORY
        requests:
          cpu: $env:RESOURCE_REQUESTS_CPU
          memory: $env:RESOURCE_REQUESTS_MEMORY

    kongIngress:
      route:
        headers:
          x-azure-fdid:
          - $env:FRONT_DOOR_ID
      upstream:
        host_header: $env:KONG_INGRESS_UPSTREAM_HOST_HEADER

    ingress:
      annotations:
        kubernetes.io/ingress.class: $env:KONG_INGRESS_CLASS

    config:
      cosmos:
        connectionString: "$env:COSMOS_CONN_STRING"
        databaseName: "$env:COSMOS_DATABASE"
        containerName: "$env:COSMOS_CONTAINER"
      serviceBus:
        connectionString: "$env:SB_CONN_STRING"
        eventsTopic: "$env:SB_EVENTS_TOPIC"
        platformEventsSubscription: "$env:SB_PLATFORM_EVENTS_SUBSCRIPTION"
      eventsServiceBus:
        connectionString: "$env:EVENTS_SB_CONN_STRING"
        queue: "$env:EVENTS_SB_QUEUE"
      appInsights:
        instrumentationKey: "$env:APP_INSIGHTS_INSTRUMENTATION_KEY"
      b2c:
        clientId: "$env:B2C_CLIENT_ID"
        domainHost: "$env:B2C_DOMAIN_HOST"
        tenantId: "$env:B2C_TENANT_ID"
        policyName: "$env:B2C_POLICY_NAME"
      enableIntrospection: "$env:ENABLE_INTROSPECTION"
      enableTracing: "$env:ENABLE_TRACING"
      apiKind: "$env:API_KIND"
    "@ | Out-File -FilePath ./deploy-values.yaml

    Write-Host ""
    Write-Host "Helm deploy prep complete!"
  displayName: Prep Helm Deploy
  name: prepHelmDeploy
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: true
  env:
    SP_CLIENT_ID: ${{ parameters.svcPrincipalClientId }}
    SP_SECRET: ${{ parameters.svcPrincipalSecret }}
    AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
    CONTAINER_REGISTRY_NAME: ${{ parameters.containerRegistryName }}
    IMAGE_REPOSITORY_NAME: ${{ parameters.imageRepositoryName }}
    CHART_REPOSITORY_NAME: ${{ parameters.chartRepositoryName }}
    CHART_NAME: ${{ parameters.chartName }}
    ENV: ${{ parameters.env }}
    LOCATION: ${{ parameters.location }}
    REPLICAS: ${{ parameters.replicas }}
    FRONT_DOOR_ID: ${{ parameters.frontDoorId }}
    KONG_INGRESS_CLASS: ${{ parameters.kongIngressClass }}
    KONG_INGRESS_UPSTREAM_HOST_HEADER: ${{ parameters.kongIngressUpstreamHostHeader }}
    RESOURCE_LIMITS_CPU: ${{ parameters.resourceLimitsCpu }}
    RESOURCE_LIMITS_MEMORY: ${{ parameters.resourceLimitsMemory }}
    RESOURCE_REQUESTS_CPU: ${{ parameters.resourceRequestsCpu }}
    RESOURCE_REQUESTS_MEMORY: ${{ parameters.resourceRequestsMemory }}
    APP_INSIGHTS_INSTRUMENTATION_KEY: ${{ parameters.appInsightsKey }}
    COSMOS_CONN_STRING: ${{ parameters.cosmosConnString }}
    COSMOS_DATABASE: ${{ parameters.cosmosDatabase }}
    COSMOS_CONTAINER: ${{ parameters.cosmosContainer }}    
    SB_CONN_STRING: ${{ parameters.serviceBusConnectionString }}
    SB_EVENTS_TOPIC: ${{ parameters.sbEventsTopic }}
    SB_PLATFORM_EVENTS_SUBSCRIPTION: ${{ parameters.sbPlatformEventsSubscription }}    
    B2C_CLIENT_ID: ${{ parameters.b2cClientId }}
    B2C_DOMAIN_HOST: ${{ parameters.b2cDomainHost }}
    B2C_TENANT_ID: ${{ parameters.b2cTenantId }}
    B2C_POLICY_NAME: ${{ parameters.b2cPolicyName }}
    ENABLE_TRACING: ${{ parameters.enableTracing }}
    ENABLE_INTROSPECTION: ${{ parameters.enableIntrospection }}
    API_KIND: ${{ parameters.apiKind }}
    NODE_SELECTOR_POOL: ${{ parameters.nodeSelectorPool }}
    IMAGE_TAG: ${{ parameters.imageTag }}
    EVENTS_SB_CONN_STRING: ${{ parameters.eventsSbConnString }}
    EVENTS_SB_QUEUE: ${{ parameters.eventsSbQueue }}

- task: Kubernetes@1
  displayName: Kubectl Version
  name: kubectlVersion
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'version'
    arguments: '--short'

- task: HelmInstaller@1
  displayName: Helm Installer
  name: helmInstaller
  inputs:
    helmVersionToInstall: latest

- task: HelmDeploy@0
  displayName: Helm Deploy
  name: helmDeploy
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: ./${{ parameters.chartName }}
    releaseName: ${{ parameters.helmReleaseName }}
    valueFile: ./deploy-values.yaml
    install: true
    waitForExecution: false
    failOnStderr: false