pr: none
trigger: none

schedules:
# Run every day at 5 AM but only if code has changed.
- cron: "0 5 * * *"
  displayName: Integration Tests
  branches:
    include:
    - master

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: ezpay-integration-tests

resources:
  repositories:
  - repository: testing-e2e
    type: git
    name: testing-e2e   

steps:
  - checkout: self

  - checkout: testing-e2e

  - script: |
      mv $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/pipelines/cypress-integration-test/integration/*.* $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/
    displayName: 'Copy Files'

  - task: replacetokens@3
    displayName: Replace tokens in ad-token-config.json
    inputs:
      rootDirectory: $(System.DefaultWorkingDirectory)/devops-app-pipelines/src
      targetFiles: ad-token-config.json
      encoding: auto
      writeBOM: true
      actionOnMissing: fail
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - script: |
      npm install fs puppeteer util replace-in-file
      node getADToken.js      
    displayName: 'Get bearer token'
    workingDirectory: $(System.DefaultWorkingDirectory)/devops-app-pipelines/src    

  - template: ./templates/integration-test.yaml
    parameters:
      packageName: ezpay-api-svc

  - template: ./templates/integration-test.yaml
    parameters:
      packageName: payer-portal

  - template: ./templates/integration-test.yaml
    parameters:
      packageName: merchant-portal

  - task: replacetokens@3
    displayName: Replace tokens in cleanUp-config.json
    inputs:
      rootDirectory: $(System.DefaultWorkingDirectory)/devops-app-pipelines/src
      targetFiles: cleanUp-config.json
      encoding: auto
      writeBOM: true
      actionOnMissing: fail
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - script: |
      npm install crypto got
      node cleanUp.js      
    displayName: 'Clean up test data'
    workingDirectory: $(System.DefaultWorkingDirectory)/src

  - task: PublishBuildArtifacts@1
    displayName: Publish build artifact
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: results  

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-result-*.xml'
      mergeTestResults: true
      testRunTitle: 'Integration Test'
      searchFolder: $(Pipeline.Workspace)
      failTaskOnFailedTests: true