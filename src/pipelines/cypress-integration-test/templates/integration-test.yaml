parameters:
  packageName: ''

jobs:
- job: DownloadFiles
  steps: 
  - download: current
    artifact: Configs
    path: $(Build.SourcesDirectory)/src
  
  - download: current
    artifact: CypressFiles
    path: $(Build.SourcesDirectory)/packages

- job: BuildImage
  steps:
  - task: CopyFiles@2
    displayName: ${{ parameters.packageName }} - Copy test files
    inputs:
      SourceFolder: $(Build.SourcesDirectory)/packages/${{ parameters.packageName }}/cypress
      Contents: '**'
      TargetFolder: $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress

  - script: mv $(Build.SourcesDirectory)/src/${{ parameters.packageName }}.cypress.json $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress.json
    displayName: ${{ parameters.packageName }} - Add cypress.json

  - task: replacetokens@3
    displayName: ${{ parameters.packageName }} - Replace tokens in cypress.json
    inputs:
      rootDirectory: $(Pipeline.Workspace)/${{ parameters.packageName }}
      targetFiles: cypress.json
      encoding: auto
      writeBOM: true
      actionOnMissing: fail
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - script: docker build -t cypress-${{ parameters.packageName }}:5.0.0 -f  $(Build.SourcesDirectory)/src/Dockerfile $(Pipeline.Workspace)/${{ parameters.packageName }} 
    displayName: ${{ parameters.packageName }} - Build integraton test docker image

- job: RunTest
  steps:
  - script: docker run -v $(Pipeline.Workspace)/${{ parameters.packageName }}:/e2e cypress-${{ parameters.packageName }}:5.0.0 || true
    displayName: ${{ parameters.packageName }} - Run test
    workingDirectory: $(Pipeline.Workspace)/${{ parameters.packageName }}

  - task: ArchiveFiles@2
    displayName: ${{ parameters.packageName }} - Archive test output - screenshots
    inputs:
      rootFolderOrFile: $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress/screenshots
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/${{ parameters.packageName }}.zip
      replaceExistingArchive: true 

  - task: ArchiveFiles@2
    displayName: ${{ parameters.packageName }} - Archive test output - videos
    inputs:
      rootFolderOrFile: $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress/videos
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/${{ parameters.packageName }}.zip
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: Publish build artifact
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: results  

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-result-*.xml'
      mergeTestResults: false
      testRunTitle: ${{ parameters.packageName }} Integration Test
      searchFolder: $(Pipeline.Workspace)/${{ parameters.packageName }}
      failTaskOnFailedTests: true      
