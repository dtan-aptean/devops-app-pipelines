parameters:
  packageName: ''
  updateMerchantPortalContentType: false
  updatePayerPortalContentType: false
  screenshotsFolderExist: false
  azureServiceConnection: ''

jobs:
- job: RunTest
  timeoutInMinutes: 360
  steps: 
  - checkout: self

  - checkout: testing-e2e  

  - task: AzureCLI@2
    condition: eq('${{ parameters.updateMerchantPortalContentType }}', true)
    displayName: Update Merchant Portal Content Type
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage blob update --container-name `$web --name index.html --content-type text/html --connection-string '$(MERCHANT_PORTAL_CONN_STRING)'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

  - task: AzureCLI@2
    condition: eq('${{ parameters.updatePayerPortalContentType }}', true)
    displayName: Update Payer Portal Content Type
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnection }}
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        az storage blob update --container-name `$web --name index.html --content-type text/html --connection-string '$(PAYER_PORTAL_CONN_STRING)'
      workingDirectory: '$(System.DefaultWorkingDirectory)'      

  - task: replacetokens@3
    displayName: Replace tokens in ad-token-config.json
    inputs:
      rootDirectory: $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/pipelines/cypress-integration-test/integration
      targetFiles: ad-token-config.json
      encoding: auto
      writeBOM: true
      actionOnMissing: fail
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - script: |
      npm install fs puppeteer util replace-in-file
      node getADToken.js      
    displayName: 'Get bearer token'
    workingDirectory: $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/pipelines/cypress-integration-test/integration 

  - task: CopyFiles@2
    displayName: ${{ parameters.packageName }} - Copy test files
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)/testing-e2e/src/${{ parameters.packageName }}/cypress
      Contents: '**'
      TargetFolder: $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress

  - script: mv $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/pipelines/cypress-integration-test/integration/${{ parameters.packageName }}.cypress.json $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress.json
    displayName: ${{ parameters.packageName }} - Add cypress.json

  - task: replacetokens@3
    displayName: ${{ parameters.packageName }} - Replace tokens in cypress.json
    inputs:
      rootDirectory: $(Pipeline.Workspace)/${{ parameters.packageName }}
      targetFiles: cypress.json
      encoding: auto
      writeBOM: true
      actionOnMissing: fail
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  - script: docker build --tag cypress-${{ parameters.packageName }}:5.1.0 --file  $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/pipelines/cypress-integration-test/Dockerfile $(Pipeline.Workspace)/${{ parameters.packageName }} 
    displayName: ${{ parameters.packageName }} - Build integraton test docker image

  - script: docker run --ipc=host --volume $(Pipeline.Workspace)/${{ parameters.packageName }}:/e2e cypress-${{ parameters.packageName }}:5.1.0 || true
    displayName: ${{ parameters.packageName }} - Run test
    workingDirectory: $(Pipeline.Workspace)/${{ parameters.packageName }}

  - task: replacetokens@3
    displayName: Replace tokens in cleanUp-config.json
    inputs:
      rootDirectory: $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/pipelines/cypress-integration-test/integration
      targetFiles: cleanUp-config.json
      encoding: auto
      writeBOM: true
      actionOnMissing: fail
      keepToken: false
      tokenPrefix: '#{'
      tokenSuffix: '}#'

  # - script: |
  #     npm install crypto got
  #     node cleanUp.js      
  #   displayName: 'Clean up test data'
  #   workingDirectory: $(System.DefaultWorkingDirectory)/devops-app-pipelines/src/pipelines/cypress-integration-test/integration        

  - pwsh: |
      $folderExists = Test-Path ./screenshots -PathType Container
      Write-Host "##vso[task.setvariable variable=screenshotsFolderExist;]$folderExists"
    displayName: Check existence of screenshots folder
    workingDirectory: $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress

  - task: ArchiveFiles@2
    displayName: ${{ parameters.packageName }} - Archive test output - screenshots
    condition: eq(variables.screenshotsFolderExist, true)
    inputs:
      rootFolderOrFile: $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress/screenshots
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/${{ parameters.packageName }}.zip
      replaceExistingArchive: true 

  - task: ArchiveFiles@2
    displayName: ${{ parameters.packageName }} - Archive test output - videos
    inputs:
      rootFolderOrFile: $(Pipeline.Workspace)/${{ parameters.packageName }}/cypress/videos
      archiveType: zip
      archiveFile: $(Build.ArtifactStagingDirectory)/${{ parameters.packageName }}.zip
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    displayName: Publish build artifact
    condition: succeededOrFailed()
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: results  

  - task: PublishTestResults@2
    displayName: 'Publish test results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-result-*.xml'
      mergeTestResults: false
      testRunTitle: ${{ parameters.packageName }} Integration Test
      searchFolder: $(Pipeline.Workspace)/${{ parameters.packageName }}
      failTaskOnFailedTests: true


