parameters:
  serviceConnection: ''
  svcPrincipalClientId: ''
  svcPrincipalSecret: ''
  azureTenantId: ''
  aksName: ''
  aksResourceGroup: ''
  containerRegistryName: ''
  imageRepositoryName: ''
  chartRepositoryName: ''
  k8sNamespace: ''
  helmReleaseName: ''
  chartName: ''
  env: ''
  replicas: ''
  frontDoorId: ''
  kongIngressClass: ''
  kongIngressUpstreamHostHeader: ''
  resourceLimitsCpu: ''
  resourceLimitsMemory: ''
  resourceRequestsCpu: ''
  resourceRequestsMemory: ''
  apteanTenantId: ''
  storeUrl: ''
  adminEmail: ''
  adminPassword: 
  sqlConnString: ''
  sqlCommandTimeout: ''
  b2cClientId: ''
  b2cTenantId: ''
  b2cDomainHost: ''
  b2cPolicyName: ''
  b2cRedirectUri: ''
  b2cDomainHint: ''
  friendlyName: ''
  apteanPayApiUrl: ''
  merchantPortalUrl: ''
  wepayAppId: ''
  wepayEnv: ''
  wepayApiVersion: ''
  wepayApiKey: ''
  useHttpClusterHttps: ''
  useHttpXForwardedProto: ''
  forwardedHttpHeader: ''
  displayFullErrorStack: ''
  blobStorageConnString: ''
  blobStorageContainerName: ''
  blobStorageEndpoint: ''
  blobStorageAppendContainerName: ''
  useBlobStorageToStoreKeys: ''
  blobStorageContainerNameForKeys: ''
  keyVaultIdForKeys: ''
  enableRedis: ''
  redisDatabaseId: ''
  redisConnString: ''
  useRedisToStoreKeys: ''
  useRedisForCaching: ''
  ignoreRedisTimeoutException: ''
  useRedisToStorePluginsInfo: ''
  userAgentStringsPath: ''
  crawlerOnlyUserAgentStringsPath: ''
  disableSampleDataDuringInstallation: ''
  pluginsIgnoredDuringInstallation: ''
  clearPluginShadowDirOnStartup: ''
  copyLockedPluginAssemblies: ''
  usePluginShadowCopy: ''
  useUnsafeLoadAssembly: ''
  useSessionStateTempDataProvider: ''
  apteanLanguagePluginApiUrl: ''

steps:
- pwsh: |
    $env:HELM_EXPERIMENTAL_OCI = 1

    az login --service-principal -u $env:SP_CLIENT_ID -p $env:SP_SECRET --tenant $env:AZURE_TENANT_ID

    $fullRegistryName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io"

    $env:SP_SECRET | helm registry login $fullRegistryName `
      --username $env:SP_CLIENT_ID `
      --password-stdin

    $latestHelmChart = az acr repository show-tags `
      --name $env:CONTAINER_REGISTRY_NAME `
      --repository $env:CHART_REPOSITORY_NAME `
      --top 1 `
      --orderby time_desc | ConvertFrom-Json

    $latestTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
    $imageRepository = "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:CHART_NAME"

    Write-Host ""
    $fullChartName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io" + "/" + $env:CHART_REPOSITORY_NAME + ":" + $latestHelmChart
    Write-Host "fullChartName: $fullChartName"

    helm chart pull $fullChartName

    Write-Host ""
    helm chart export $fullChartName --destination .

    @"
    image:
      repository: $imageRepository
      tag: $latestTag

    commonLabels:
      env: $env:ENV

    deployment:
      replicas: $env:REPLICAS

    pod:
      resources:
        limits:
          cpu: $env:RESOURCE_LIMITS_CPU
          memory: $env:RESOURCE_LIMITS_MEMORY
        requests:
          cpu: $env:RESOURCE_REQUESTS_CPU
          memory: $env:RESOURCE_REQUESTS_MEMORY

    kongIngress:
      route:
        headers:
          x-azure-fdid:
          - $env:FRONT_DOOR_ID
      upstream:
        host_header: $env:KONG_INGRESS_UPSTREAM_HOST_HEADER

    ingress:
      annotations:
        kubernetes.io/ingress.class: $env:KONG_INGRESS_CLASS
      path: /ecomm-sf-$env:APTEAN_TENANT_ID
      
    config: 
      tenantId: "$env:APTEAN_TENANT_ID"
      storeUrl: "$env:STORE_URL"
      admin:
        emailAddress: "$env:ADMIN_EMAIL"
        password: "$env:ADMIN_PSW"
      sql:
        connectionString: "$env.SQL_CONN_STRING"
        commandTimeout: "$env.SQL_COMMAND_TIMEOUT"
      apteanIdentityPlugin:
        b2c:
          clientId: "$env:B2C_CLIENT_ID"
          domainHost: "$env:B2C_DOMAIN_HOST"
          tenantId: "$env:B2C_TENANT_ID"
          policyName: "$env:B2C_POLICY_NAME"
          redirectUri: "$env:B2C_REDIRECT_URI"
          domainHint: "$env:B2C_DOMAIN_HINT"
          friendlyName: "$env:FRIENDLY_NAME"
      apteanPayPlugin:
        apiUrl: "$env:APTEAN_PAY_API_URL"
        merchantPortalUrl: "$env:MERCHANT_PORTAL_URL"
        wepay:
          appId: "$env:WEPAY_APP_ID"
          environment: "$env:WEPAY_ENV"
          apiVersion: "$env:WEPAY_API_VERSION"
          apiKey: "$env:WEPAY_API_KEY"
      apteanLanguagePlugin:
        apiUrl: "$env:APTEAN_LANGUAGE_PLUGIN_API_URL"
      hosting:
        useHttpClusterHttps: $env:USE_HTTP_CLUSTER_HTTPS
        useHttpXForwardedProto: $env:USE_HTTP_X_FORWARDED_PROTO
        forwardedHttpHeader: $env:FORWARDED_HTTP_HEADER
      nop:
        displayFullErrorStack: $env:DISPLAY_FULL_ERROR_STACK
        azureBlobStorageConnectionString: "$env:BLOB_STORAGE_CONN_STRING"
        azureBlobStorageContainerName: "$env:BLOB_STORAGE_CONTAINER_NAME"
        azureBlobStorageEndPoint: "$env:BLOB_STORAGE_ENDPOINT"
        azureBlobStorageAppendContainerName: $env:BLOB_STORAGE_APPEND_CONTAINER_NAME
        useAzureBlobStorageToStoreDataProtectionKeys: $env:USE_BLOB_STORAGE_TO_STORE_KEYS
        azureBlobStorageContainerNameForDataProtectionKeys: "$env:BLOB_STORAGE_CONTAINER_NAME_FOR_KEYS"
        azureKeyVaultIdForDataProtectionKeys: "$env:KEY_VAULT_ID_FOR_KEYS"
        redisEnabled: $env:ENABLE_REDIS
        redisDatabaseId: "$env:REDIS_DATABASE_ID"
        redisConnectionString: "$env:REDIS_CONN_STRING"
        useRedisToStoreDataProtectionKeys: $env:USE_REDIS_TO_STORE_KEYS
        useRedisForCaching: $env:USE_REDIS_FOR_CACHING
        ignoreRedisTimeoutException: $env:IGNORE_REDIS_TIMEOUT_EXCEPTION
        useRedisToStorePluginsInfo: $env:USE_REDIS_TO_STORE_PLUGINS_INFO
        userAgentStringsPath: "$env:USER_AGENT_STRINGS_PATH"
        crawlerOnlyUserAgentStringsPath: "$env:CRAWLER_ONLY_USER_AGENT_STRINGS_PATH"
        disableSampleDataDuringInstallation: $env:DISABLE_SAMPLE_DATA_DURING_INSTALLATION
        pluginsIgnoredDuringInstallation: "$env:PLUGINS_IGNORED_DURING_INSTALLATION"
        clearPluginShadowDirectoryOnStartup: $env:CLEAR_PLUGIN_SHADOW_DIR_ON_STARTUP
        copyLockedPluginAssembilesToSubdirectoriesOnStartup: $env:COPY_LOCKED_PLUGIN_ASSEMBLIES
        usePluginsShadowCopy: $env:USE_PLUGIN_SHADOW_COPY
        useUnsafeLoadAssembly: $env:USE_UNSAFE_LOAD_ASSEMBLY
        useSessionStateTempDataProvider: $env:USE_SESSION_STATE_TEMP_DATA_PROVIDER
    "@ | Out-File -FilePath ./deploy-values.yaml

    Write-Host ""
    Write-Host "Helm deploy prep complete!"
  displayName: Prep Helm Deploy
  name: prepHelmDeploy
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: true
  env:
    SP_CLIENT_ID: ${{ parameters.svcPrincipalClientId }}
    SP_SECRET: ${{ parameters.svcPrincipalSecret }}
    AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
    CONTAINER_REGISTRY_NAME: ${{ parameters.containerRegistryName }}
    IMAGE_REPOSITORY_NAME: ${{ parameters.imageRepositoryName }}
    CHART_REPOSITORY_NAME: ${{ parameters.chartRepositoryName }}
    CHART_NAME: ${{ parameters.chartName }}
    ENV: ${{ parameters.env }}
    REPLICAS: ${{ parameters.replicas }}
    FRONT_DOOR_ID: ${{ parameters.frontDoorId }}
    KONG_INGRESS_CLASS: ${{ parameters.kongIngressClass }}
    KONG_INGRESS_UPSTREAM_HOST_HEADER: ${{ parameters.kongIngressUpstreamHostHeader }}
    RESOURCE_LIMITS_CPU: ${{ parameters.resourceLimitsCpu }}
    RESOURCE_LIMITS_MEMORY: ${{ parameters.resourceLimitsMemory }}
    RESOURCE_REQUESTS_CPU: ${{ parameters.resourceRequestsCpu }}
    RESOURCE_REQUESTS_MEMORY: ${{ parameters.resourceRequestsMemory }}
    APTEAN_TENANT_ID: ${{ parameters.apteanTenantId }}
    STORE_URL: ${{ parameters.storeUrl }}
    ADMIN_EMAIL: ${{ parameters.adminEmail }}
    ADMIN_PSW: ${{ parameters.adminPassword }}
    SQL_CONN_STRING: ${{ parameters.sqlConnString }}
    SQL_COMMAND_TIMEOUT: ${{ parameters.sqlCommandTimeout }}
    B2C_CLIENT_ID: ${{ parameters.b2cClientId }}
    B2C_TENANT_ID: ${{ parameters.b2cTenantId }}
    B2C_DOMAIN_HOST: ${{ parameters.b2cDomainHost }}
    B2C_POLICY_NAME: ${{ parameters.b2cPolicyName }}
    B2C_REDIRECT_URI: ${{ parameters.b2cRedirectUri }}
    B2C_DOMAIN_HINT: ${{ parameters.b2cDomainHint }}
    FRIENDLY_NAME: ${{ parameters.friendlyName }}
    APTEAN_PAY_API_URL: ${{ parameters.apteanPayApiUrl }}
    APTEAN_LANGUAGE_PLUGIN_API_URL: ${{ parameters.apteanLanguagePluginApiUrl }}
    MERCHANT_PORTAL_URL: ${{ parameters.merchantPortalUrl }}
    WEPAY_APP_ID: ${{ parameters.wepayAppId }}
    WEPAY_ENV: ${{ parameters.wepayEnv }}
    WEPAY_API_VERSION: ${{ parameters.wepayApiVersion }}
    WEPAY_API_KEY: ${{ parameters.wepayApiKey }}
    USE_HTTP_CLUSTER_HTTPS: ${{ parameters.useHttpClusterHttps }}
    USE_HTTP_X_FORWARDED_PROTO: ${{ parameters.useHttpXForwardedProto }}
    FORWARDED_HTTP_HEADER: ${{ parameters.forwardedHttpHeader }}
    DISPLAY_FULL_ERROR_STACK: ${{ parameters.displayFullErrorStack }}
    BLOB_STORAGE_CONN_STRING: ${{ parameters.blobStorageConnString }}
    BLOB_STORAGE_CONTAINER_NAME: ${{ parameters.blobStorageContainerName }}
    BLOB_STORAGE_ENDPOINT: ${{ parameters.blobStorageEndpoint }}
    BLOB_STORAGE_APPEND_CONTAINER_NAME: ${{ parameters.blobStorageAppendContainerName }}
    USE_BLOB_STORAGE_TO_STORE_KEYS: ${{ parameters.useBlobStorageToStoreKeys }}
    BLOB_STORAGE_CONTAINER_NAME_FOR_KEYS: ${{ parameters.blobStorageContainerNameForKeys }}
    KEY_VAULT_ID_FOR_KEYS: ${{ parameters.keyVaultIdForKeys }}
    ENABLE_REDIS: ${{ parameters.enableRedis }}
    REDIS_DATABASE_ID: ${{ parameters.redisDatabaseId }}
    REDIS_CONN_STRING: ${{ parameters.redisConnString }}
    USE_REDIS_TO_STORE_KEYS: ${{ parameters.useRedisToStoreKeys }}
    USE_REDIS_FOR_CACHING: ${{ parameters.useRedisForCaching }}
    IGNORE_REDIS_TIMEOUT_EXCEPTION: ${{ parameters.ignoreRedisTimeoutException }}
    USE_REDIS_TO_STORE_PLUGINS_INFO: ${{ parameters.useRedisToStorePluginsInfo }}
    USER_AGENT_STRINGS_PATH: ${{ parameters.userAgentStringsPath }}
    CRAWLER_ONLY_USER_AGENT_STRINGS_PATH: ${{ parameters.crawlerOnlyUserAgentStringsPath }}
    DISABLE_SAMPLE_DATA_DURING_INSTALLATION: ${{ parameters.disableSampleDataDuringInstallation }}
    PLUGINS_IGNORED_DURING_INSTALLATION: ${{ parameters.pluginsIgnoredDuringInstallation }}
    CLEAR_PLUGIN_SHADOW_DIR_ON_STARTUP: ${{ parameters.clearPluginShadowDirOnStartup }}
    COPY_LOCKED_PLUGIN_ASSEMBLIES: ${{ parameters.copyLockedPluginAssemblies }}
    USE_PLUGIN_SHADOW_COPY: ${{ parameters.usePluginShadowCopy }}
    USE_UNSAFE_LOAD_ASSEMBLY: ${{ parameters.useUnsafeLoadAssembly }}
    USE_SESSION_STATE_TEMP_DATA_PROVIDER: ${{ parameters.useSessionStateTempDataProvider }}

- task: Kubernetes@1
  displayName: Kubectl Version
  name: kubectlVersion
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'version'
    arguments: '--short'

- task: HelmInstaller@1
  displayName: Helm Installer
  name: helmInstaller
  inputs:
    helmVersionToInstall: latest

- task: HelmDeploy@0
  displayName: Helm Deploy
  name: helmDeploy
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: ./${{ parameters.chartName }}
    releaseName: ${{ parameters.helmReleaseName }}
    valueFile: ./deploy-values.yaml
    install: true
    waitForExecution: false
    failOnStderr: false
