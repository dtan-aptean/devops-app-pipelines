parameters:
  releaseVersion: ''
  serviceConnection: ''
  svcPrincipalClientId: ''
  svcPrincipalSecret: ''
  azureTenantId: ''
  aksName: ''
  aksResourceGroup: ''
  containerRegistryName: ''
  chartRepositoryName: ''
  chartName: ''
  helmReleaseName: ''
  k8sNamespace: ''
  env: ''
  location: ''
  newRelicCliApiKey: ''
  newRelicAccountId: ''
  frontDoorId: ''
  # COMMON CRM CONFIGS
  crmClientId: ''
  crmClientSecret: ''
  crmBackendBaseUrl: ''
  crmNotificationsWebhookUrl: ''
  serviceBusEventsConnString: ''
  serviceBusEventsTopicName: ''
  sentryDsn: ''
  # CRM API SVC
  crmApiSvcImageTag: ''
  crmApiSvcImageRepositoryName: ''
  crmApiSvcReplicas: ''
  crmApiSvcNodeSelectorPool: ''
  crmApiSvcResourceLimitsCpu: ''
  crmApiSvcResourceLimitsMemory: ''
  crmApiSvcResourceRequestsCpu: ''
  crmApiSvcResourceRequestsMemory: ''  
  crmApiSvcKongIngressUpstreamHostHeader: ''
  crmApiSvcKongIngressClass: ''
  crmApiSvcSubsMgmtGrpcUrl: ''
  crmApiSvcSubsMgmtApiKey: ''
  crmApiSvcSubsMgmtServiceId: ''
  
steps:
- pwsh: |
    $env:HELM_EXPERIMENTAL_OCI = 1

    az login --service-principal -u $env:SP_CLIENT_ID -p $env:SP_SECRET --tenant $env:AZURE_TENANT_ID

    $fullRegistryName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io"

    $env:SP_SECRET | helm registry login $fullRegistryName `
      --username $env:SP_CLIENT_ID `
      --password-stdin

    $helmCharts = az acr repository show-tags `
      --name $env:CONTAINER_REGISTRY_NAME `
      --repository $env:CHART_REPOSITORY_NAME `
      --top 10 `
      --orderby time_desc | ConvertFrom-Json
      
    if($helmCharts.Count -eq 1)
    {
      $latestHelmChart = $helmCharts
    }
    else
    {
      $latestHelmChart = $helmCharts[0]
    }

    foreach($chart in $helmCharts)
    {
      if($chart -eq $env:RELEASE_VERSION)
      {
        $latestHelmChart = $chart
        break
      }
    }

    Write-Host ""
    $fullChartName = "$env:CONTAINER_REGISTRY_NAME.azurecr.io" + "/" + $env:CHART_REPOSITORY_NAME + ":" + $latestHelmChart
    Write-Host "fullChartName: $fullChartName"

    helm chart pull $fullChartName

    Write-Host ""
    helm chart export $fullChartName --destination .

    if ($env:DOCKER_IMAGE_TAGS) {
      $latestCrmApiSvcTag = $env:DOCKER_IMAGE_TAGS.Split(':')[1]
      Write-Host crm-api-svc tag: $latestCrmApiSvcTag
    }

    # CRM API SVC
    if (!$latestCrmApiSvcTag) {
      if ($env:CRM_API_SVC_IMAGE_TAG)
      {
        Write-Host Using configured crm-api-svc tag: $env:CRM_API_SVC_IMAGE_TAG
        $latestCrmApiSvcTag = $env:CRM_API_SVC_IMAGE_TAG
      }
      else
      {
        Write-Host Fetching latest crm-api-svc tag.
        $latestCrmApiSvcTag = az acr repository show-tags --name $env:CONTAINER_REGISTRY_NAME --repository $env:CRM_API_SVC_IMAGE_REPOSITORY_NAME --top 1 --orderby time_desc | ConvertFrom-Json
      }
    }

    Write-Host "##vso[task.setvariable variable=docker_image_tags;]crm-api-svc:$latestCrmApiSvcTag"
    @"
    commonLabels:
      env: $env:ENV
      location: $env:LOCATION

    config:
      sentry:
        dsn: "$env:SENTRY_DSN"
      serviceBus:
        connectionString: "$env:EVENTS_SB_CONN_STRING"
        topicName: "$env:EVENTS_SB_TOPIC_NAME"

    crmApiSvc:
      image:      
        repository: "$env:CONTAINER_REGISTRY_NAME.azurecr.io/$env:CRM_API_SVC_IMAGE_REPOSITORY_NAME"
        tag: $latestCrmApiSvcTag

      deployment:
        replicas: $env:CRM_API_SVC_REPLICAS

      nodeSelector:
        pool: "$env:CRM_API_SVC_NODE_SELECTOR_POOL"

      pod:
        resources:
          limits:
            cpu: $env:CRM_API_SVC_RESOURCE_LIMITS_CPU
            memory: $env:CRM_API_SVC_RESOURCE_LIMITS_MEMORY
          requests:
            cpu: $env:CRM_API_SVC_RESOURCE_REQUESTS_CPU
            memory: $env:CRM_API_SVC_RESOURCE_REQUESTS_MEMORY

      kongIngress:
        route:
          headers:
            x-azure-fdid:
            - $env:FRONT_DOOR_ID
        upstream:
          host_header: $env:CRM_API_SVC_KONG_INGRESS_UPSTREAM_HOST_HEADER

      ingress:
        annotations:
          kubernetes.io/ingress.class: $env:CRM_API_SVC_KONG_INGRESS_CLASS

      config:
        subsMgmt:
          grpcUrl: "$env:CRM_API_SVC_SUBS_MGMT_GRPC_URL"
          apiKey: "$env:CRM_API_SVC_SUBS_MGMT_API_KEY"
          serviceId: "$env:CRM_API_SVC_SUBS_MGMT_SERVICE_ID"
        backend:
          clientId: "$env:CRM_CLIENT_ID"
          clientSecret: "$env:CRM_CLIENT_SECRET"
          baseUrl: "$env:CRM_BACKEND_BASE_URL"
        notifications:
          webhookUrl: "$env:CRM_NOTIFICATIONS_WEBHOOK_URL"

    "@ | Out-File -FilePath ./deploy-values.yaml

    # Uncomment for debugging values.
    # Get-Content -Path ./deploy-values.yaml

    Write-Host ""
    Write-Host "Helm deploy prep complete!"
  displayName: Prep Helm Deploy
  name: prepHelmDeploy
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: true
  env:
    # COMMON CONFIGS
    SP_CLIENT_ID: ${{ parameters.svcPrincipalClientId }}
    SP_SECRET: ${{ parameters.svcPrincipalSecret }}
    AZURE_TENANT_ID: ${{ parameters.azureTenantId }}
    CONTAINER_REGISTRY_NAME: ${{ parameters.containerRegistryName }}
    CHART_REPOSITORY_NAME: ${{ parameters.chartRepositoryName }}
    CHART_NAME: ${{ parameters.chartName }}
    ENV: ${{ parameters.env }} 
    LOCATION: ${{ parameters.location }}
    FRONT_DOOR_ID: ${{ parameters.frontDoorId }}
    SENTRY_DSN: ${{ parameters.sentryDsn }}
    RELEASE_VERSION: $ {{ parameters.releaseVersion }}
    # COMMON CRM CONFIGS
    CRM_CLIENT_ID: ${{ parameters.crmClientId }}
    CRM_CLIENT_SECRET: ${{ parameters.crmClientSecret }}
    CRM_BACKEND_BASE_URL: ${{ parameters.crmBackendBaseUrl }}
    CRM_NOTIFICATIONS_WEBHOOK_URL: ${{ parameters.crmNotificationsWebhookUrl}}
    EVENTS_SB_CONN_STRING: ${{ parameters.serviceBusEventsConnString }}
    EVENTS_SB_TOPIC_NAME: ${{ parameters.serviceBusEventsTopicName }}
    # CRM GQL API SVC
    CRM_API_SVC_IMAGE_TAG: ${{ parameters.crmApiSvcImageTag }}
    CRM_API_SVC_IMAGE_REPOSITORY_NAME: ${{ parameters.crmApiSvcImageRepositoryName }}
    CRM_API_SVC_REPLICAS: ${{ parameters.crmApiSvcReplicas }}
    CRM_API_SVC_NODE_SELECTOR_POOL: ${{ parameters.crmApiSvcNodeSelectorPool }}
    CRM_API_SVC_RESOURCE_LIMITS_CPU: ${{ parameters.crmApiSvcResourceLimitsCpu }}
    CRM_API_SVC_RESOURCE_LIMITS_MEMORY: ${{ parameters.crmApiSvcResourceLimitsMemory }}
    CRM_API_SVC_RESOURCE_REQUESTS_CPU: ${{ parameters.crmApiSvcResourceRequestsCpu }}
    CRM_API_SVC_RESOURCE_REQUESTS_MEMORY: ${{ parameters.crmApiSvcResourceRequestsMemory }}
    CRM_API_SVC_KONG_INGRESS_UPSTREAM_HOST_HEADER: ${{ parameters.crmApiSvcKongIngressUpstreamHostHeader }}
    CRM_API_SVC_KONG_INGRESS_CLASS: ${{ parameters.crmApiSvcKongIngressClass }}
    CRM_API_SVC_SUBS_MGMT_GRPC_URL: ${{ parameters.crmApiSvcSubsMgmtGrpcUrl }}
    CRM_API_SVC_SUBS_MGMT_API_KEY: ${{ parameters.crmApiSvcSubsMgmtApiKey }}
    CRM_API_SVC_SUBS_MGMT_SERVICE_ID: ${{ parameters.crmApiSvcSubsMgmtServiceId }}

- task: Kubernetes@1
  displayName: Kubectl Version
  name: kubectlVersion
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'version'
    arguments: '--short'

- task: HelmInstaller@1
  displayName: Helm Installer
  name: helmInstaller
  inputs:
    helmVersionToInstall: latest

- task: HelmDeploy@0
  displayName: Helm Deploy
  name: helmDeploy
  inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscription: ${{ parameters.serviceConnection }}
    azureResourceGroup: ${{ parameters.aksResourceGroup }}
    kubernetesCluster: ${{ parameters.aksName }}
    useClusterAdmin: true
    namespace: ${{ parameters.k8sNamespace }}
    command: 'upgrade'
    chartType: 'FilePath'
    chartPath: ./${{ parameters.chartName }}
    releaseName: ${{ parameters.helmReleaseName }}
    valueFile: ./deploy-values.yaml
    install: true
    waitForExecution: false
    failOnStderr: false

- pwsh: |
    docker pull newrelic/cli
    $services = "$(docker_image_tags)"
    $serviceList = $services.Split(',')
    foreach ($serviceTag in $serviceList)  {
      $service = $serviceTag.Split(':')[0]
      $imageTag = $serviceTag.Split(':')[1]      
      $appName = "$service-$env:ENV-$env:LOCATION".ToLower()
      Write-Host "Querying APM information for: $appName"

      docker run `
          -e NEW_RELIC_API_KEY=$env:NEW_RELIC_API_KEY `
          -e NEW_RELIC_REGION=US `
          -e NEW_RELIC_ACCOUNT_ID=$env:NEW_RELIC_ACCOUNT_ID `
          newrelic/cli `
          apm application search --name $appName > ./output.json

      $outputJson = Get-Content ./output.json | ConvertFrom-Json      
      if (!$outputJson) {
        Write-Host "No application found with name:" $appName
        continue
      }
      $applicationId = $outputJson[0].applicationId
      Write-Host found appId: $applicationId
      Write-Host "Creating deployment for revision: $imageTag"
      docker run `
          -e NEW_RELIC_API_KEY=$env:NEW_RELIC_API_KEY `
          -e NEW_RELIC_REGION=US `
          -e NEW_RELIC_ACCOUNT_ID=$env:NEW_RELIC_ACCOUNT_ID `
          newrelic/cli `
          apm deployment create --applicationId $applicationId --revision $imageTag --description "Deployment of $imageTag"
    }
  displayName: New Relic Deployment Markers
  name: newRelicDeploymentMarkers
  workingDirectory: $(System.DefaultWorkingDirectory)
  failOnStderr: false
  env:
    NEW_RELIC_API_KEY: ${{ parameters.newRelicCliApiKey }}
    NEW_RELIC_ACCOUNT_ID: ${{ parameters.newRelicAccountId }}    
    ENV: ${{ parameters.env }} 
    LOCATION: ${{ parameters.location }}