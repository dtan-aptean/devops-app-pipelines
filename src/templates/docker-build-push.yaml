parameters:
  majorVersionYear: ''
  majorVersionMonth: ''
  minorVersion: ''
  fullVersion: ''
  friendlyName: ''
  fullVersionFriendly: ''
  containerRegistry: ''
  containerRepository: ''
  dockerFilePath: ''
  protoSrcPath: ''
  protoDestPath: ''
  dockerBuildContext: '**'  
  dockerBuildArguments: ''
  agentPool: { vmImage: ubuntu-latest }
  newRelicDotnetAgent: false

stages:
- stage: Build
  displayName: Execute build, unit tests, build docker image and push to ACR

  jobs:
  - job: Execute

    pool: ${{ parameters.agentPool }}

    steps:
    - pwsh: |
        if ("${{ parameters.protoSrcPath }}".length -eq 0 -Or "${{ parameters.protoDestPath }}".length -eq 0) {
          Write-Host "No protobuff src or dest path provided. Not copying file."
          Exit
        }

        Copy-Item -Path "${{ parameters.protoSrcPath }}" -Destination "${{ parameters.protoDestPath }}" -Recurse
        $fileCount = @( Get-ChildItem "${{ parameters.protoDestPath }}" ).Count
        Write-Host "Protobuff definitions copied! $fileCount file(s) copied!"
      displayName: Copy Protobuff Definition
      name: copyProtoDef
      workingDirectory: $(System.DefaultWorkingDirectory)
      failOnStderr: true

    - bash: |
        if [ $NEW_RELIC_DOTNET_AGENT ]
        then
          echo "##vso[task.setvariable variable=finalDockerBuildArgs]$DOCKER_BUILD_ARGUMENTS --build-arg NEW_RELIC_AGENT_PACKAGE_URL=https://download.newrelic.com/$(curl -s 'https://nr-downloads-main.s3.amazonaws.com/?delimiter=dot_net_agent&prefix=dot_net_agent%2Flatest_release' | grep -Eoi 'dot_net_agent\/latest_release\/newrelic-netcore20-agent_[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+_amd64\.tar\.gz')"
        else
          echo "##vso[task.setvariable variable=finalDockerBuildArgs]$DOCKER_BUILD_ARGUMENTS"
        fi
      displayName: Update Docker Build Arguments
      name: updateBuildArguments
      env: 
        NEW_RELIC_DOTNET_AGENT: ${{ parameters.newRelicDotnetAgent }}
        DOCKER_BUILD_ARGUMENTS: ${{ parameters.dockerBuildArguments }}

    - task: Docker@2
      displayName: Build Docker Image
      name: buildDockerImage
      inputs:
        containerRegistry: ${{ parameters.containerRegistry }}
        repository: ${{ parameters.containerRepository }}
        command: 'build'
        Dockerfile: ${{ parameters.dockerFilePath }}
        tags: ${{ parameters.fullVersionFriendly }}
        buildContext: ${{ parameters.dockerBuildContext }}
        arguments: $(finalDockerBuildArgs)
        addPipelineData: false

    - task: Docker@2
      displayName: Push Docker Image
      name: pushDockerImage
      inputs:
        containerRegistry: ${{ parameters.containerRegistry }}
        repository: ${{ parameters.containerRepository }}
        command: 'push'
        tags: ${{ parameters.fullVersionFriendly }}
        addPipelineData: false

    - task: Bash@3
      displayName: Create Noop Artifact
      name: createNoopArtifact
      inputs:
        targetType: 'inline'
        script: |
          echo "*** CREATING NOOP FILE ***"
          touch $NOOP_PATH
          echo "*** CREATING NOOP FILE => DONE ***"
        workingDirectory: $(System.DefaultWorkingDirectory)
        failOnStderr: true
      env:
        NOOP_PATH: $(Build.ArtifactStagingDirectory)/noop.txt

    - publish: $(Build.ArtifactStagingDirectory)
      displayName: Publish Noop Artifact
      artifact: drop